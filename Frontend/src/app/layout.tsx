"use client";
// import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { useState } from "react";
import Navbar from "@/components/navbar";
import { Auth0Provider } from "@auth0/auth0-react";
import ProtectedRoute from "@/components/ProtectedRoute";

const geistSans = localFont({
	src: "./fonts/GeistVF.woff",
	variable: "--font-geist-sans",
	weight: "100 900",
});
const geistMono = localFont({
	src: "./fonts/GeistMonoVF.woff",
	variable: "--font-geist-mono",
	weight: "100 900",
});

// export const metadata: Metadata = {
// 	title: "Create Next App",
// 	description: "Generated by create next app",
// };

const Providers = ({ children }: { children: React.ReactNode }) => {
	const [queryClient] = useState(
		() =>
			new QueryClient({
				defaultOptions: {
					queries: {
						staleTime: 60 * 1000,
					},
				},
			})
	);
	return (
		<Auth0Provider
			domain={process.env.NEXT_PUBLIC_AUTH0_DOMAIN!}
			clientId={process.env.NEXT_PUBLIC_AUTH0_CLIENT_ID!}
			authorizationParams={{
				redirect_uri:
					typeof window !== "undefined" ? window.location.origin : "",
				audience: process.env.NEXT_PUBLIC_AUTH0_AUDIENCE,
			}}
			cacheLocation="localstorage"
			useRefreshTokens={true}
			// Add these options
			skipRedirectCallback={false}
			onRedirectCallback={(appState) => {
				// Handle redirect with the saved path
				if (appState?.returnTo) {
					window.location.href = appState.returnTo;
				}
			}}>
			<QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
		</Auth0Provider>
	);
};

export default function RootLayout({
	children,
}: Readonly<{
	children: React.ReactNode;
}>) {
	return (
		<html lang="en">
			<body
				className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
				<Providers>
					<ProtectedRoute>
						<Navbar />
						{children}
					</ProtectedRoute>
				</Providers>
			</body>
		</html>
	);
}
